/*
_  ______   _____ _____ _____ _   _
| |/ / ___| |_   _| ____/___ | | | |
| ' / |  _    | | |  _|| |   | |_| |
| . \ |_| |   | | | |__| |___|  _  |
|_|\_\____|   |_| |_____\____|_| |_|

ANYWAY, YOU MUST GIVE CREDIT TO MY CODE WHEN COPY IT
CONTACT ME HERE +237656520674
YT: KermHackTools
Github: Kgtech-cmr
*/


const axios = require('axios');
const { cmd } = require('../command');

let currentQuestion = 0;
let playersScores = {};

const questions = [
    { question: "Quel est le plus grand pays du monde ?", answer: "Russie" },
    { question: "Quelle est la capitale de la France ?", answer: "Paris" },
    { question: "Combien de continents y a-t-il sur Terre ?", answer: "7" },
    // Ajouter plus de questions ici
];

cmd({
    pattern: "qst",
    desc: "Commencez le jeu de quiz",
    react: "üß†",
    category: "fun",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        currentQuestion = 0;
        playersScores = {};  // R√©initialisation des scores des joueurs

        reply("üö® Le quiz commence maintenant ! üö®\n\nR√©pondez aux questions aussi vite que possible en faisant .q suivi de la r√©ponse !\nBonne chance !");
        sendNextQuestion(conn, from);
    } catch (e) {
        console.log(e);
        reply("‚ö†Ô∏è Une erreur est survenue. Veuillez r√©essayer plus tard.");
    }
});

cmd({
    pattern: "q",
    desc: "R√©pondre √† une question du quiz",
    react: "‚ùì",
    category: "fun",
    filename: __filename
},
async (conn, mek, m, { from, q, reply }) => {
    try {
        if (!q) return reply("‚ùå Vous devez fournir une r√©ponse.");
        
        const question = questions[currentQuestion];
        if (q.toLowerCase() === question.answer.toLowerCase()) {
            playersScores[from] = (playersScores[from] || 0) + 1;
            reply(`‚úÖ Bonne r√©ponse ! Vous avez ${playersScores[from]} points.`);
        } else {
            reply(`‚ùå Mauvaise r√©ponse ! La bonne r√©ponse √©tait : ${question.answer}`);
        }

        currentQuestion++;
        if (currentQuestion < questions.length) {
            sendNextQuestion(conn, from);
        } else {
            endGame(conn, from);
        }
    } catch (e) {
        console.log(e);
        reply("‚ö†Ô∏è Une erreur est survenue. Veuillez r√©essayer plus tard.");
    }
});

async function sendNextQuestion(conn, from) {
    if (currentQuestion < questions.length) {
        const question = questions[currentQuestion];
        return conn.reply(from, `Question ${currentQuestion + 1}: ${question.question}`, mek);
    } else {
        endGame(conn, from);
    }
}

async function endGame(conn, from) {
    let winner = Object.keys(playersScores).reduce((a, b) => playersScores[a] > playersScores[b] ? a : b);
    let score = playersScores[winner];
    return conn.reply(from, `üéâ Le jeu est termin√© !\n\nLe gagnant est ${winner} avec ${score} points ! üéâ`, mek);
}

const { cmd } = require('../command');

let wordToGuess = "";
let guessedLetters = [];
let playersGuessed = {};

cmd({
    pattern: "gst",
    desc: "Commencez le jeu de devinette de mots",
    react: "ü§î",
    category: "fun",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        wordToGuess = "javascript";  // Choisir un mot au hasard ou avec une API
        guessedLetters = Array(wordToGuess.length).fill("_");
        playersGuessed = {};
        
        reply("üî§ Le jeu de devinette commence ! üî§\n\nDevinez le mot, une lettre √† la fois en faisant .g suivi de la reponse !");
        reply(`Le mot √† deviner est : ${guessedLetters.join(" ")}`);
    } catch (e) {
        console.log(e);
        reply("‚ö†Ô∏è Une erreur est survenue. Veuillez r√©essayer plus tard.");
    }
});

cmd({
    pattern: "g",
    desc: "Deviner une lettre du mot",
    react: "‚ùì",
    category: "fun",
    filename: __filename
},
async (conn, mek, m, { from, q, reply }) => {
    try {
        if (!q || q.length !== 1) return reply("‚ùå Veuillez entrer une seule lettre.");
        if (playersGuessed[from]) return reply("‚ùå Vous avez d√©j√† devin√©.");
        
        playersGuessed[from] = true;
        
        if (wordToGuess.includes(q)) {
            guessedLetters = guessedLetters.map((letter, index) => wordToGuess[index] === q ? q : letter);
            reply(`‚úÖ Bien jou√© !\n\nLe mot actuel est : ${guessedLetters.join(" ")}`);
        } else {
            reply(`‚ùå La lettre "${q}" n'est pas dans le mot.`);
        }

        if (!guessedLetters.includes("_")) {
            endGame(conn, from);
        }
    } catch (e) {
        console.log(e);
        reply("‚ö†Ô∏è Une erreur est survenue. Veuillez r√©essayer plus tard.");
    }
});

async function endGame(conn, from) {
    let winner = from;  // Le joueur qui a trouv√© la r√©ponse
    return conn.reply(from, `üéâ F√©licitations ${winner}, vous avez devin√© le mot "javascript" ! üéâ`, mek);
}

const { cmd } = require('../command');

const animals = [
    { description: "Je suis un animal qui aboie et qui est souvent le meilleur ami de l'homme.", answer: "Chien" },
    { description: "Je suis un animal qui miaule et je suis souvent gard√© comme animal de compagnie.", answer: "Chat" },
    // Ajouter plus d'animaux ou objets ici
];

let currentAnimal = 0;

cmd({
    pattern: "whta",
    desc: "Devinez l'animal ou l'objet",
    react: "üê±",
    category: "fun",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const animal = animals[currentAnimal];
        reply(`üßê Voici l'indice : ${animal.description}`);
        reply("R√©pondez avec votre hypoth√®se !");
    } catch (e) {
        console.log(e);
        reply("‚ö†Ô∏è Une erreur est survenue. Veuillez r√©essayer plus tard.");
    }
});

cmd({
    pattern: "ani",
    desc: "Deviner l'animal ou l'objet",
    react: "‚ùì",
    category: "fun",
    filename: __filename
},
async (conn, mek, m, { from, q, reply }) => {
    try {
        const animal = animals[currentAnimal];
        if (q.toLowerCase() === animal.answer.toLowerCase()) {
            reply(`‚úÖ Bravo, vous avez trouv√© que c'√©tait un ${animal.answer} !`);
            currentAnimal++;
            if (currentAnimal < animals.length) {
                reply(`Voici un autre indice !`);
            } else {
                reply("üéâ F√©licitations, vous avez devin√© tous les animaux !");
            }
        } else {
            reply(`‚ùå Ce n'est pas la bonne r√©ponse. Essayez encore !`);
        }
    } catch (e) {
        console.log(e);
        reply("‚ö†Ô∏è Une erreur est survenue. Veuillez r√©essayer plus tard.");
    }
});